#+TITLE: ActiveDirectoryRights with .NET Assembly
#+AUTHOR: Russell Brinson
#+DATE: 2023-01-023
#+OPTIONS: tasks:nil timestamp:nil validation:nil

* Overview

I recently did a lab machine with a privilege escalation of a user in =Domain Admins= that had a =ActiveDirectoryRights GenericAll= from a user we had access to.
But the way I did it the first time was flawed and ended up getting lucky in my manual enumeration attempt with ACLs. Bloodhound of course found this pretty quickly but it still stuck with me as a technique I under use.

Using PowerShell with the ActiveDirectory Module it is fairly easily, but that still has its own opsec consideration. 
#+BEGIN_SRC powershell :eval nil :tangle no
Import-Module ActiveDirectory
(Get-Acl 'AD:\CN=admin_user,CN=Users,DC=example,DC=corp').Access | Where-Object {$_.IdentityReference -Like "example\current_user"}
#+END_SRC

I set out to make a module that I could run from a beacon with =execute-assembly= so I could get some csharp practice.

Also, totally giving csharp with org tangle a shot here. Hopefully it works and the tangled aspect can be foudn [[][here].

* Getting C# Working

The steps I'm working through initially is to get code tangling properly first that will compile with =dotnet build=. Then trying to learn enough elisp to edit the =ob-csharp= to run the code here. 

#+BEGIN_SRC csharp :tangle no
Console.WriteLine("Hello World!");
#+END_SRC


** Wrong Build program, this uses =msbuild= as part of visual studio
note: I already type this up and the link / =*.cs= was interesting so I'm keeping it, but it did not work for me right now.

This doesn't work because we need a "project". From [[https://learn.microsoft.com/en-us/visualstudio/msbuild/walkthrough-creating-an-msbuild-project-file-from-scratch?view=vs-2022][Microsoft's Walkthrough of creating an msbuild project file from scratch]] we get the following template.

Also their Note on using an asterisk as a wildcard character in the item element with the example =*.cs=, seems interesting from an attacking a devops pipeline. 



#+BEGIN_SRC xml :tangle no
  <Project>
    <ItemGroup>
      <Compile Include="helloworld.cs" />
    </ItemGroup>
    <Target Name="Build">
      <Csc Sources="@(Compile)"/>
    </Target>
  </Project>
#+END_SRC

** Didn't work, settled on creating console app through =dotnet= and just creating the .cs project and copy/pasting to the console app directory
Trying another project file with [[https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-build][Microsoft's dotnet build documentation]].
Unfortunately, this looks like I need a lot more build /project information and running the =dotnet new console -o MyApp -f net7.0= is going to be much easier (but not for running everything inside of org). I will try with mono later to see if it makes things easier.

#+BEGIN_SRC xml :tangle no
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net7.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>

#+END_SRC
 

* Basic Active Directory Get Current Domain
By setting this up, I'm completing a task that I know a bit more about what I should expect as output and confirming I'm talking to my AD setup.

#+BEGIN_SRC :tangle basicADUser-enum.cs
using System.DirectoryServices;
var myDomain = Domain.GetCurrentDomain();
Console.WriteLine("Domain Name: {myDomain.Name}");

#+END_SRC

This immediately did not recognize the =System.DirectoryServices= and all of the searching kept pointing to this being a reference issue and that the easy yet no config file way of fixing this was to use Visual Studio and add the reference there. This was the error

#+BEGIN_SRC shell :tangle no
C:\Users\russe\projects\Learning-Malware\malware-dev\csharp\MyApp\Program.cs(2,14): error CS0234: The type or namespace name 'Direct
oryServices' does not exist in the namespace 'System' (are you missing an assembly reference?) [C:\Users\russe\projects\Learning-Mal
ware\malware-dev\csharp\MyApp\MyApp.csproj]
#+END_SRC


* Resources

- [[https://learn.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectoryrights?view=dotnet-plat-ext-7.0][Microsoft's ActiveDirectoryRights page]]
- [[https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/][C# Compiler Options]]
- [[https://github.com/thomas-villagers/ob-csharp][ob-chsarp.el for org-babel]]
